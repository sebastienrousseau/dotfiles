#!/usr/bin/env bash

################################################################################
# 🅱🅰🆂🅷🆁🅲
# File: bashrc
# Version: 0.2.470
# Author: Sebastien Rousseau
# Copyright (c) 2015-2025. All rights reserved
# Description: Configure system environment variables and load dotfiles
# Website: https://dotfiles.io
# License: MIT
################################################################################

#-----------------------------------------------------------------------------
# Function: check_required_tools
#
# Description:
#   Verifies all required system tools are available.
#
# Arguments:
#   None
#
# Returns:
#   0 if all tools are available, 1 otherwise
#-----------------------------------------------------------------------------
check_required_tools() {
    local required_tools=("hostname" "uname" "whoami")
    local missing_tools=()

    for tool in "${required_tools[@]}"; do
        if ! command -v "${tool}" &> /dev/null; then
            missing_tools+=("${tool}")
        fi
    done

    if [[ ${#missing_tools[@]} -gt 0 ]]; then
        echo "Warning: The following required tools are missing: ${missing_tools[*]}" >&2
        return 1
    fi

    return 0
}

#-----------------------------------------------------------------------------
# Function: configure_system_info
#
# Description:
#   Configures system-related environment variables.
#
# Arguments:
#   None
#
# Returns:
#   0 on success, 1 on failure
#-----------------------------------------------------------------------------
configure_system_info() {
    # System information
    if ! HOSTNAME=$(hostname -f 2>/dev/null || hostname); then
        echo "Warning: Could not determine hostname" >&2
        return 1
    fi

    if ! OS_ARCH=$(uname -m); then
        echo "Warning: Could not determine system architecture" >&2
        return 1
    fi

    if ! OS_NAME=$(uname); then
        echo "Warning: Could not determine operating system" >&2
        return 1
    fi

    if ! OS_VERSION=$(uname -r); then
        echo "Warning: Could not determine system version" >&2
        return 1
    fi

    if ! USER=$(whoami); then
        echo "Warning: Could not determine username" >&2
        return 1
    fi

    # Export system variables
    export HOSTNAME
    export OS_ARCH
    export OS_NAME
    export OS_VERSION
    export USER
    export ARCHFLAGS="-arch ${OS_ARCH}"

    return 0
}

#-----------------------------------------------------------------------------
# Function: configure_locale_settings
#
# Description:
#   Configures locale and language settings.
#
# Arguments:
#   None
#
# Returns:
#   0 on success
#-----------------------------------------------------------------------------
configure_locale_settings() {
    # Default language settings - use environment variable if set, otherwise default
    local USER_LANGUAGE="${DOTFILES_LANG:-en_GB.UTF-8}"

    # Export locale variables
    export LANG="${USER_LANGUAGE}"
    export LANGUAGE="${USER_LANGUAGE}"
    export LC_ALL="${USER_LANGUAGE}"
    export LC_CTYPE="${USER_LANGUAGE}"

    return 0
}

#-----------------------------------------------------------------------------
# Function: configure_dotfiles_environment
#
# Description:
#   Configures dotfiles-specific environment variables.
#
# Arguments:
#   None
#
# Returns:
#   0 on success, 1 on failure
#-----------------------------------------------------------------------------
configure_dotfiles_environment() {
    # Dotfiles configuration
    export DOTFILES_VERSION='0.2.470'
    export DOTFILES="${HOME}/.dotfiles/lib"

    # Check if dotfiles directory exists
    if [[ ! -d "${DOTFILES}" ]]; then
        echo "Warning: Dotfiles directory not found: ${DOTFILES}" >&2
        mkdir -p "${DOTFILES}" || {
            echo "Error: Failed to create dotfiles directory: ${DOTFILES}" >&2
            return 1
        }
        echo "Created dotfiles directory: ${DOTFILES}" >&2
    fi

    # Additional environment settings
    export INPUTRC="${HOME}/.inputrc"

    # Set SSL_CERT_FILE only if the file exists
    if [[ -f "${HOME}/cacert.pem" ]]; then
        export SSL_CERT_FILE="${HOME}/cacert.pem"
    fi

    # Only set TERM if not already defined
    if [[ -z "${TERM}" ]]; then
        export TERM="xterm-256color"
    fi

    return 0
}

#-----------------------------------------------------------------------------
# Function: check_shell_compatibility
#
# Description:
#   Checks if the current shell is compatible with this script.
#
# Arguments:
#   None
#
# Returns:
#   0 if compatible, 1 otherwise
#-----------------------------------------------------------------------------
check_shell_compatibility() {
    # Check if we're running in bash
    if [[ -z "${BASH_VERSION}" ]]; then
        echo "Warning: This script is designed for bash, but appears to be running in a different shell" >&2
        return 1
    fi

    return 0
}

#-----------------------------------------------------------------------------
# Function: load_dotfiles
#
# Description:
#   Loads all .sh files from the dotfiles directory.
#
# Arguments:
#   None
#
# Returns:
#   0 on success, 1 if no files found or load errors
#-----------------------------------------------------------------------------
load_dotfiles() {
    # Only proceed if the directory exists
    if [[ ! -d "${DOTFILES}" ]]; then
        echo "Notice: Dotfiles directory does not exist, skipping loading of dotfiles" >&2
        return 1
    fi

    local loaders_pattern="${DOTFILES}/*.sh"
    local found_files=0
    local load_errors=0

    # Check if any matching files exist
    for loader in ${loaders_pattern}; do
        if [[ -f "${loader}" ]]; then
            found_files=1
            # Load the file, capturing any errors
            if ! source "${loader}"; then
                echo "Warning: Failed to load ${loader}" >&2
                load_errors=$((load_errors + 1))
            fi
        fi
    done

    if [[ ${found_files} -eq 0 ]]; then
        echo "Notice: No dotfiles found in ${DOTFILES}" >&2
        return 1
    fi

    if [[ ${load_errors} -gt 0 ]]; then
        echo "Warning: ${load_errors} files failed to load properly" >&2
        return 1
    fi

    return 0
}

#-----------------------------------------------------------------------------
# Main Execution
#-----------------------------------------------------------------------------

# Check shell compatibility
check_shell_compatibility || echo "Warning: Shell compatibility check failed, continuing anyway" >&2

# Check required tools
check_required_tools || echo "Warning: Some required tools are missing, functionality may be limited" >&2

# Configure system information
configure_system_info || echo "Warning: System information configuration failed" >&2

# Configure locale settings
configure_locale_settings

# Configure dotfiles environment
configure_dotfiles_environment || echo "Warning: Dotfiles environment configuration failed" >&2

# Load dotfiles
load_dotfiles || echo "Notice: No dotfiles were loaded" >&2
