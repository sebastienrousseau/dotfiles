# 🅳🅾🆃🅵🅸🅻🅴🆂 (v0.2.469) - <https://dotfiles.io>
# Works with Zsh on macOS and Linux
# Made with ♥ in London, UK by Sebastien Rousseau
# License: MIT

## PROMPT SETTINGS
setopt PROMPT_SUBST

# Color definitions
GREY='%F{242}'
RED='%F{#FF5C57}'
YELLOW='%F{#F3F99D}'
BLUE='%F{#57C7FF}'
MAGENTA='%F{#FF6AC1}'
RESET='%f'

# Load datetime module for EPOCHREALTIME (if available)
zmodload zsh/datetime 2>/dev/null

# Timer variables
typeset -g cmd_timestamp=0

# Function: Display the current directory
current_dir() {
    echo "${BLUE}%~${RESET}"
}

# Function: Display virtual environment (if active)
virtualenv_info() {
    [[ -n "$VIRTUAL_ENV" ]] && echo "${GREY}($(basename "$VIRTUAL_ENV"))${RESET} "
}

# Function: Git status
git_status() {
    # Check if we're in a Git repository
    command git rev-parse --is-inside-work-tree &>/dev/null || return 0

    # Get current branch name or commit hash
    local git_branch
    git_branch="$(command git symbolic-ref --short HEAD 2>/dev/null || git rev-parse --short HEAD 2>/dev/null)" || return 0

    # Check for uncommitted changes
    local status_symbol=""
    command git diff --quiet --ignore-submodules HEAD &>/dev/null || status_symbol="*"

    # Determine ahead/behind status
    local behind=0 ahead=0
    if command git rev-list --count --left-right '@{upstream}...HEAD' &>/dev/null; then
        IFS=$' \t' read -r behind ahead < <(git rev-list --count --left-right '@{upstream}...HEAD' 2>/dev/null)
    fi

    local arrows=""
    (( ahead > 0 )) && arrows+="⇡"
    (( behind > 0 )) && arrows+="⇣"

    echo "${GREY}${git_branch}${status_symbol}${arrows}${RESET}"
}

# Function: Prompt symbol (✓ if last command succeeded, ✗ if failed)
prompt_symbol() {
    echo "%(?.${MAGENTA}.${RED})❯${RESET}"
}

# Preexec: record the start time of the command
preexec() {
    cmd_timestamp=$EPOCHREALTIME
}

# Precmd: update RPROMPT with timing and current time
precmd() {
    local timer_display=""
    if (( cmd_timestamp > 0 )); then
        local now=$EPOCHREALTIME
        local elapsed=$(( now - cmd_timestamp ))
        (( elapsed >= 5 )) && timer_display="${YELLOW}$(printf "%.0fs" $elapsed)${RESET} "
        cmd_timestamp=0
    fi

    export RPROMPT="${timer_display}${GREY}%T${RESET}"
}

# Set the main prompt
setopt PROMPT_CR
setopt PROMPT_SP

# Main prompt
prompt() {

local venv_info
venv_info="$(virtualenv_info)"
local curr_dir
curr_dir="$(current_dir)"
local git_stat
git_stat="$(git_status)"
local prompt_sym
prompt_sym="$(prompt_symbol)"

export PROMPT="${venv_info}${curr_dir} ${git_stat}
${prompt_sym} "

}

# Conditionally source additional prompt configuration if it exists
if [[ -f "$HOME/.dotfiles/lib/configurations/prompt/prompt" ]]; then
    source "$HOME/.dotfiles/lib/configurations/prompt/prompt"
fi
